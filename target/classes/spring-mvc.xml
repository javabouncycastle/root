<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
                        http://www.springframework.org/schema/tx 
  						http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
  						">
  						<!-- default-autowire="byName   -->
                        
 <!--    <bean id="springContextHelper" class="com.bis.majian.practice.module.spring.util.SpringContextHelper"></bean>  
    <context:component-scan base-package="com.bis.majian.practice.module.*" />   -->
                        
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <mvc:annotation-driven /> 
    <context:component-scan base-package="cn.com.sure,
    cn.com.sure.admin" />
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->  
            </list>  
        </property>  
    </bean>  
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean>  
      
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->  
    <bean id="multipartResolver"    
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 默认编码 -->  
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->  
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->  
        <property name="maxInMemorySize" value="40960" />    
    </bean>   
    
    <!-- 国际化处理采用spring -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>i18n/messages</value>
		</property>
	</bean>
	  	<!-- 加入Aspectj配置  2017.5.24bylimin--> 
    <aop:aspectj-autoproxy proxy-target-class="true" />  
    
	<!-- 第一种加事务的方式：注解方式，需要在要添加事务的方法类上添加注解 @Transaction(value="txManager") -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性    -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	
	<!-- quartz -->
	<!-- 工作的bean -->  
   <!-- <bean id="myJob" class="cn.com.sure.quartz.KpgQuartzTaskExecutorImpl" />
   <bean id="autoKpg" class="cn.com.sure.auto.kpg.AutoKpg" />
   <bean id="autoArchKpg" class="cn.com.sure.auto.atrh.AutoArchQuartzImpl" />
   job的配置开始  
   <bean id="myJobDetail"  
       class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
       <property name="targetObject">  
           <ref bean="myJob" />  
       </property>  
       <property name="targetMethod">  
           <value>executeTask</value>  
       </property>  
   </bean> 
   <bean id="myJobDetail2"  
       class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
       <property name="targetObject">  
           <ref bean="autoKpg" />  
       </property>  
       <property name="targetMethod">  
           <value>autoKpg</value>  
       </property>  
   </bean> 
	<bean id="myJobDetail3"  
       class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
       <property name="targetObject">  
           <ref bean="autoArchKpg" />  
       </property>  
       <property name="targetMethod">  
           <value>countArchNum</value>  
       </property>  
   </bean>
  
   调度的配置开始  
   <bean id="crontestJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail">  
           <ref bean="myJobDetail" />  
       </property>  
       <property name="cronExpression">  
           <value>10 0/1 * * * ?</value>  Cron表达式“10 */1 * * * ?”意为：从10秒开始，每1分钟执行一次。   
       </property>  
   </bean>
   <bean id="crontestJobTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail">  
           <ref bean="myJobDetail2" />  
       </property>  
       <property name="cronExpression">  
           <value>10 0/1 * * * ?</value>  Cron表达式“10 */1 * * * ?”意为：从10秒开始，每1分钟执行一次。   
       </property>  
   </bean>
   <bean id="crontestJobTrigger3" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail">  
           <ref bean="myJobDetail3" />  
       </property>  
       <property name="cronExpression">  
           <value>10 0/1 * * * ?</value>  Cron表达式“10 */1 * * * ?”意为：从10秒开始，每1分钟执行一次。   
       </property>  
   </bean> 
  
   启动触发器的配置开始  
    <bean name="startQuertz" lazy-init="false" autowire="no"  
       class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
       <property name="triggers">  
           <list>  
               <ref bean="crontestJobTrigger" />  
           </list>  
       </property>  
   </bean> 
   <bean name="startAutoKpg" lazy-init="false" autowire="no"  
       class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
       <property name="triggers">  
           <list>  
               <ref bean="crontestJobTrigger2" />  
           </list>  
       </property>  
   </bean> 
   <bean name="startAutoArch" lazy-init="false" autowire="no"  
       class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
       <property name="triggers">  
           <list>  
               <ref bean="crontestJobTrigger3" />  
           </list>  
       </property>  
   </bean> -->
</beans>  